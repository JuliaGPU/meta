#### Julia-Backend
So fo the Julia backend `maleadt` had a working protoype for CUDA https://groups.google.com/forum/#!topic/julia-dev/doQUqQabC8A
Following this outline we need a way to switch the target of the compilation module ( a macro and the necessary backend changes), address space preserving bitcasts and an extended llvmcall/llvmdecl.

#### Links and further information
##### Issues and PRs
- llvmcall: https://github.com/JuliaLang/julia/pull/8740 https://github.com/JuliaLang/julia/issues/8308
- address space: https://github.com/JuliaLang/julia/pull/9423

##### Issue at OpenCL.jl
https://github.com/JuliaGPU/OpenCL.jl/issues/29
##### Prototypical implementation for CUDA:
https://github.com/maleadt/julia


##### Papers/Presentations
http://llvm.org/devmtg/2009-10/OpenCLWithLLVM.pdf
http://blog.maleadt.net/2015/01/15/julia-cuda/


##### Related work:
http://blog.theincredibleholk.org/blog/2012/12/05/compiling-rust-for-gpus/
http://halide-lang.org/
https://code.google.com/p/lunarglass/
https://developer.nvidia.com/cuda-llvm-compiler
http://scala-lms.github.io/


